"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import sys
from pathlib import Path

from celery.schedules import crontab
from decouple import Csv, config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(BASE_DIR / "apps"))

# Django backend settings

SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", cast=bool, default=False)
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv(), default="")
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", cast=Csv(), default="")
SESSION_COOKIE_NAME = "coval_sessionid"
REDIS_HOST = config("REDIS_HOST", default="localhost")
REDIS_PORT = config("REDIS_PORT", cast=int, default=6379)
REDIS_CACHE_DB_NUMBER = config("REDIS_CACHE_DB_NUMBER", cast=int, default=1)
REDIS_CELERY_DB_NUMBER = config("REDIS_CELERY_DB_NUMBER", cast=int, default=3)

REDIS_URL_BASE = f"redis://{REDIS_HOST}:{REDIS_PORT}/"
REDIS_URL = f"{REDIS_URL_BASE}{REDIS_CACHE_DB_NUMBER}"

# Database

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME", default="coval"),
        "USER": config("DB_USER", default="coval"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", cast=int, default=5432),
        "ATOMIC_REQUESTS": True,
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.lz4.Lz4Compressor",
        },
        "VERSION": 1,
    }
}


# Django REST Framework settings

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAdminUser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "EXCEPTION_HANDLER": "core.exceptions.exception_handler",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_THROTTLE_CLASSES": ["core.throttling.APIKeyBasedThrottle"],
    "DEFAULT_THROTTLE_RATES": {
        "api_keys": "10/minute",
    },
    "PAGE_SIZE": 50,
}


# Internationalization

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Celery settings
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "default"
CELERY_BROKER_URL = REDIS_URL_BASE + str(REDIS_CELERY_DB_NUMBER)
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True

CELERY_VALIDATION_QUEUE = "validation"

CELERY_WORKER_PREFETCH_MULTIPLIER = 1

CELERY_TASK_ROUTES = {
    "validations.tasks.validate_file": {"queue": CELERY_VALIDATION_QUEUE},
    "validations.tasks.validate_counter_api": {"queue": CELERY_VALIDATION_QUEUE},
}

CELERY_BEAT_SCHEDULE = {
    "expired_validations_cleanup": {
        "task": "validations.tasks.expired_validations_cleanup",
        "schedule": crontab(minute="0", hour="0"),  # every day at midnight
    },
    "update_registry_models": {
        "task": "counter.tasks.update_registry_models",
        "schedule": crontab(minute="10", hour="0"),  # every day at 00:10
    },
    "daily_validation_report": {
        "task": "core.tasks.daily_validation_report",
        "schedule": crontab(minute="0", hour="6"),  # every day at 6:00 AM
    },
}


# dj-rest-auth settings
REST_AUTH = {
    "TOKEN_MODEL": None,
    "REGISTER_SERIALIZER": "core.serializers.ValidatorRegisterSerializer",
}

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_ADAPTER = "core.account.ValidatorAccountAdapter"

# Application definition

INSTALLED_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_api_key",
    "django_celery_results",
    "dj_rest_auth",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "counter",
    "validations",
    "core",  # here because it overrides some auth related templates
)

SITE_ID = 1

MIDDLEWARE = (
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
)

ROOT_URLCONF = "config.urls"

TEMPLATES = (
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
)

AUTH_PASSWORD_VALIDATORS = (
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
)

AUTH_USER_MODEL = "core.User"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

WSGI_APPLICATION = "config.wsgi.application"
STATIC_URL = "static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = config("MEDIA_ROOT", default=str(BASE_DIR / "media/"))
STATIC_ROOT = config("STATIC_ROOT", default=str(BASE_DIR / "static/"))


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "colored"},
    },
    "loggers": {
        "django.db": {"level": "INFO"},
        "requests": {"level": "INFO"},
    },
    "formatters": {
        "colored": {"()": "colorlog.ColoredFormatter", "format": "%(log_color)s%(message)s"}
    },
    "root": {"level": "DEBUG", "handlers": ["console"]},
}

# other django stuff
DJANGO_ADMIN_PATH = config("DJANGO_ADMIN_PATH", default="admin/")
# Email
ADMINS = config("ADMINS", cast=Csv(cast=Csv(post_process=tuple), delimiter=";"), default="")
OPERATORS = config("OPERATORS", cast=Csv(cast=Csv(post_process=tuple), delimiter=";"), default="")
if not OPERATORS:
    OPERATORS = ADMINS

EMAIL_SUBJECT_PREFIX = config("EMAIL_SUBJECT_PREFIX", default="[COUNTER Validator] ")
SERVER_EMAIL = config("SERVER_EMAIL", default="root@localhost")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="root@localhost")
EMAIL_HOST = config("EMAIL_HOST", default="localhost")

if MAILGUN_API_KEY := config("MAILGUN_API_KEY", default=""):
    # if we have the mailgun api key, we activate mailgun
    INSTALLED_APPS += ("anymail",)
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    ANYMAIL = {
        "MAILGUN_API_KEY": MAILGUN_API_KEY,
        "MAILGUN_SENDER_DOMAIN": config("MAILGUN_SENDER_DOMAIN"),
        "MAILGUN_API_URL": config("MAILGUN_API_URL", default="https://api.eu.mailgun.net/v3"),
    }

# our own settings
VALIDATION_MODULES_URLS = config(
    "VALIDATION_MODULES_URLS", default="http://localhost:8180/", cast=Csv(delimiter=";")
)
# access to the validation modules is controlled by a lock mechanism, to guard against
# the lock being held indefinitely due to some error, we set a timeout for the lock
VALIDATION_MODULE_LOCK_TIMEOUT = config("VALIDATION_MODULE_LOCK_TIMEOUT", cast=int, default=180)
REGISTRY_URL = config("REGISTRY_URL", default="https://registry.countermetrics.org")
# size of the hash in bytes. Blake 2b is used as the hashing algorithm
HASHING_DIGEST_SIZE = config("FILE_HASHING_DIGEST_SIZE", cast=int, default=32)
HASHING_SALT = config("FILE_HASHING_SALT", default=SECRET_KEY)
# the time in days the validation is valid, after that it will no longer be available
# and will be deleted at the next cleanup
VALIDATION_LIFETIME = config("VALIDATION_LIFETIME", cast=int, default=7)
# the time in days public validations are valid, after that they will no longer be available
# and will be deleted at the next cleanup
PUBLIC_VALIDATION_LIFETIME = config("PUBLIC_VALIDATION_LIFETIME", cast=int, default=90)
# per-file type file size limit in bytes
FILE_SIZE_LIMITS = {
    "json": config("FILE_SIZE_LIMIT_JSON", cast=int, default=100_000_000),
    "xlsx": config("FILE_SIZE_LIMIT_XLSX", cast=int, default=10_000_000),
    "csv": config("FILE_SIZE_LIMIT_CSV", cast=int, default=10_000_000),
    "default": config("FILE_SIZE_LIMIT_DEFAULT", cast=int, default=1_000_000),
}
ALLOW_USER_REGISTRATION = config("ALLOW_USER_REGISTRATION", cast=bool, default=True)

EXPORTED_SETTINGS = [
    "ALLOW_USER_REGISTRATION",
    "FILE_SIZE_LIMITS",
]

# development stuff
DEBUG_SLEEP = config("DEBUG_SLEEP", cast=float, default=0)

# silencing warning about partially configured pagination
SILENCED_SYSTEM_CHECKS = ["rest_framework.W001"]
